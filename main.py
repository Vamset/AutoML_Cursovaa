# -*- coding: utf-8 -*-
"""Кондауров_Курсовая.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pk0uWsvdf7OPxbJVUbMAOKnrViFcQLth

# PIP
"""

!pip uninstall -y fedot
!pip install fedot

!pip install scipy==1.12.0

!pip install tsfresh giotto-tda scikit-learn

!pip install --upgrade pip
!pip install numpy
!pip install --upgrade numpy
!pip install fedot --upgrade

!pip install pmdarima

"""# Операции с данными"""

from fedot.api.main import Fedot
from fedot.core.data.data import InputData
from fedot.core.data.data_split import train_test_data_setup
from fedot.core.repository.tasks import Task, TaskTypesEnum, TsForecastingParams
import pandas as pd
import numpy as np
from google.colab import drive
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_squared_log_error
from pmdarima import auto_arima

drive.mount('/content/drive')
file_path = '/content/drive/MyDrive/train.csv'

data = pd.read_csv(file_path, delimiter=',', parse_dates=['date'])

data.info()

data = data.sort_values(by = 'date',ascending=True)

data.head(5)

data.tail(5)

data.describe()

plt.figure(figsize=(15, 5))
plt.plot(data['date'], data['sales'])
plt.title('Временной ряд продаж')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.grid(True)
plt.show()

"""В каждой временной точке у нас от 1 до 52 магазинов (store_nbr) и от 1 до 33 товаров (family). Агрегируем данные по средним продажам"""

len(data)

data_cleaned = data.copy()
mean_sales = data_cleaned[data_cleaned['sales'] != 0]['sales'].mean()
data_cleaned['sales'] = data_cleaned['sales'].replace(0, mean_sales)

data_grouped = data_cleaned.groupby('date')['sales'].mean().reset_index()

len(data_grouped)

plt.figure(figsize=(15, 5))
plt.plot(data_grouped['date'], data_grouped['sales'])
plt.title('Временной ряд продаж')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.grid(True)
plt.show()

#data_trimmed = data_grouped.tail(60_000) #взять 60к

temp_file_path = '/content/drive/MyDrive/train_trimmed.csv'
data_grouped.to_csv(temp_file_path, index=False)

TRAIN_SIZE = 1319
data_grouped_train = data_grouped.iloc[0:TRAIN_SIZE,:]
data_grouped_test = data_grouped.iloc[TRAIN_SIZE:,:]

len(data_grouped_train),len(data_grouped_test)

plt.figure(figsize=(15, 5))
plt.plot(data_grouped_train['date'], data_grouped_train['sales'])
plt.title('Временной ряд продаж')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.grid(True)
plt.show()

plt.figure(figsize=(15, 5))
plt.plot(data_grouped_test['date'], data_grouped_test['sales'])
plt.title('Временной ряд продаж')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.grid(True)
plt.show()

print(data.head())

"""# 30 минут работы"""

task = Task(TaskTypesEnum.ts_forecasting, TsForecastingParams(forecast_length=365))

train_input = InputData.from_csv_time_series(task=task,
                                             file_path=temp_file_path ,
                                             delimiter=',',
                                             target_column='sales')

#train_data, test_data = train_test_data_setup(train_input)

model = Fedot(problem='ts_forecasting', task_params=task.task_params, timeout=30,  n_jobs=-1, seed=42, preset='ts')

pipeline = model.fit(train_input)

pipeline.show()

forecast = model.forecast(train_input)
print("Forecast:", forecast)

model.plot_prediction()

plt.figure(figsize=(15, 5))
plt.plot(data_grouped_test['date'], data_grouped_test['sales'], label='Истинные значения')
plt.plot(data_grouped_test['date'], forecast, label='Прогноз FEDOT')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.title('Сравнение прогноза FEDOT и реальных значений')
plt.legend()
plt.grid(True)
plt.show()

forecast = model.predict(train_input)

# Создаём график
plt.figure(figsize=(15, 5))

# Истинные значения (первоначальный временной ряд)
plt.plot(range(len(data_grouped['sales'])), data_grouped['sales'], label='Истинные значения', color='Green')

# Прогноз, сдвинутый на 365 дней назад
plt.plot(range(len(data_grouped['sales']) - 365, len(data_grouped['sales'])), forecast, label='Прогноз FEDOT', color='blue')

plt.legend()
plt.grid(True)
plt.title("Прогноз FEDOT")
plt.show()

forecast = model.predict(train_input)
test_true_values = data_grouped_test['sales'].values
test_predicted_values = forecast

# Расчёт WAPE
wape = np.sum(np.abs(test_true_values - test_predicted_values)) / np.sum(np.abs(test_true_values)) * 100

# Расчёт MSLE
msle = np.mean(np.square(np.log1p(test_true_values) - np.log1p(test_predicted_values)))

# Вывод метрик
print("Metrics:", model.get_metrics(metric_names=['rmse', 'mae', 'mape'], target=train_input.target))
print(f"WAPE: {wape:.2f}%")
print(f"MSLE: {msle:.4f}")

"""# **1 час работы**"""

model = Fedot(problem='ts_forecasting', task_params=task.task_params, timeout=60,  n_jobs=-1, seed=42, preset='ts')

pipeline = model.fit(train_input)

pipeline.show()

forecast = model.forecast(train_input)
print("Forecast:", forecast)

model.plot_prediction()

forecast = model.predict(train_input)

# Создаём график
plt.figure(figsize=(15, 5))

# Истинные значения (первоначальный временной ряд)
plt.plot(range(len(data_grouped['sales'])), data_grouped['sales'], label='Истинные значения', color='Green')

# Прогноз, сдвинутый на 365 дней назад
plt.plot(range(len(data_grouped['sales']) - 365, len(data_grouped['sales'])), forecast, label='Прогноз FEDOT', color='blue')

plt.legend()
plt.grid(True)
plt.title("Прогноз FEDOT")
plt.show()

if model.current_pipeline is None:
    print("Модель не была обучена!")
else:
    print("Модель обучена, можно вычислять метрики!")

forecast = model.predict(train_input)
test_true_values = data_grouped_test['sales'].values
test_predicted_values = forecast

# Расчёт WAPE
wape = np.sum(np.abs(test_true_values - test_predicted_values)) / np.sum(np.abs(test_true_values)) * 100

# Расчёт MSLE
msle = np.mean(np.square(np.log1p(test_true_values) - np.log1p(test_predicted_values)))

# Вывод метрик
print("Metrics:", model.get_metrics(metric_names=['rmse', 'mae', 'mape'], target=train_input.target))
print(f"WAPE: {wape:.2f}%")
print(f"MSLE: {msle:.4f}")

"""# 1.5 часа работы"""

model = Fedot(problem='ts_forecasting', task_params=task.task_params, timeout=90,  n_jobs=-1, seed=42, preset='ts')

pipeline = model.fit(train_input)

pipeline.show()

forecast = model.forecast(train_input)
print("Forecast:", forecast)

model.plot_prediction()

plt.figure(figsize=(15, 5))
plt.plot(data_grouped_test['date'], data_grouped_test['sales'], label='Истинные значения')
plt.plot(data_grouped_test['date'], forecast, label='Прогноз FEDOT')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.title('Сравнение прогноза FEDOT и реальных значений')
plt.legend()
plt.grid(True)
plt.show()

forecast = model.predict(train_input)

# Создаём график
plt.figure(figsize=(15, 5))

# Истинные значения (первоначальный временной ряд)
plt.plot(range(len(data_grouped['sales'])), data_grouped['sales'], label='Истинные значения', color='Green')

# Прогноз, сдвинутый на 365 дней назад
plt.plot(range(len(data_grouped['sales']) - 365, len(data_grouped['sales'])), forecast, label='Прогноз FEDOT', color='blue')

plt.legend()
plt.grid(True)
plt.title("Прогноз FEDOT")
plt.show()

if model.current_pipeline is None:
    print("Модель не была обучена!")
else:
    print("Модель обучена, можно вычислять метрики!")

forecast = model.predict(train_input)
test_true_values = data_grouped_test['sales'].values
test_predicted_values = forecast

# Расчёт WAPE
wape = np.sum(np.abs(test_true_values - test_predicted_values)) / np.sum(np.abs(test_true_values)) * 100

# Расчёт MSLE
msle = np.mean(np.square(np.log1p(test_true_values) - np.log1p(test_predicted_values)))

# Вывод метрик
print("Metrics:", model.get_metrics(metric_names=['rmse', 'mae', 'mape'], target=train_input.target))
print(f"WAPE: {wape:.2f}%")
print(f"MSLE: {msle:.4f}")

"""# ARIMA

ARIMA
"""

train_series = data_grouped_train['sales']
test_series = data_grouped_test['sales']

# model = auto_arima(
#     train_series,
#     seasonal=True,
#     m=7,
#     trace=True,
#     max_p=5,
#     max_q=5,
#     max_P=3,
#     max_Q=3,
#     stepwise=True,
#     n_jobs=-1,
#     information_criterion='aic'
# )

# model.summary()

model = auto_arima(
    train_series,
    seasonal=True,
    m=7,
    trace=True,
    start_p=0,
    start_q=0,
    max_p=5,
    max_q=5,
    d=None,
    D=1,
    start_P=0,
    start_Q=0,
    max_P=2,
    max_Q=2,
    stepwise=False,
    n_jobs=-1,
    information_criterion='aic',
    trend='c'
)

# model = auto_arima(
#     train_series,
#     seasonal=True,
#     m=7,
#     trace=True,
#     start_p=0,
#     start_q=0,
#     max_p=5,
#     max_q=5,
#     d=None,
#     D=1,
#     start_P=0,
#     start_Q=0,
#     max_P=2,
#     max_Q=2,
#     stepwise=True,
#     n_jobs=-1,
#     information_criterion='aic',
#     trend='c'
# )

forecast = model.predict(n_periods=len(test_series))

print(model.summary())

rmse = mean_squared_error(test_series, forecast, squared=False)
mae = mean_absolute_error(test_series, forecast)
wape = np.sum(np.abs(test_series - forecast)) / np.sum(np.abs(test_series)) * 100
msle = mean_squared_log_error(test_series, np.maximum(forecast, 0))

print(f"ARIMA RMSE: {rmse:.2f}")
print(f"ARIMA MAE: {mae:.2f}")
print(f"WAPE: {wape:.2f}%")
print(f"MSLE: {msle:.4f}")

plt.figure(figsize=(15, 5))
plt.plot(data_grouped_test['date'], test_series, label='Истинные значения')
plt.plot(data_grouped_test['date'], forecast, label='Прогноз ARIMA')
plt.xlabel('Дата')
plt.ylabel('Продажи')
plt.title('Сравнение прогноза ARIMA и реальных значений')
plt.legend()
plt.grid(True)
plt.show()